#Some Thoughts on Object-Oriented Design

Many books have been written about object-oriented program design, and although that’s not the focus of
this book, I’ll give you some pointers:
1. Gather what belongs together. If a function manipulates a global variable, the two of them might be better off in a class, as an attribute and a method.
2. Don’t let objects become too intimate. Methods should mainly be concerned with the attributes of their own instance. Let other instances manage their own state.
3. Go easy on the inheritance, especially multiple inheritance. Inheritance is useful at times but can make things unnecessarily complex in some cases. And multiple inheritance can be very difficult to get right and even harder to debug.
4. Keep it simple. Keep your methods small. As a rule of thumb, it should be possible to read (and understand) most of your methods in, say, 30 seconds. For the rest, try to keep them shorter than one page or screen.

When determining which classes you need and which methods they should have, you may try something like this:
1. Write down a description of your problem (what should the program do?). Underline all the nouns, verbs, and adjectives.
2. Go through the nouns, looking for potential classes.
3. Go through the verbs, looking for potential methods.
4. Go through the adjectives, looking for potential attributes.
5. Allocate methods and attributes to your classes.

Now you have a first sketch of an object-oriented model. You may also want to think about what responsibilities and relationships (such as inheritance or cooperation) the classes and objects will have. To refine your model, you can do the following:
1. Write down (or dream up) a set of use cases—scenarios of how your program may
be used. Try to cover all the functionality.
2. Think through every use case step by step, making sure that everything you need
is covered by your model. If something is missing, add it. If something isn’t quite
right, change it. Continue until you are satisfied.